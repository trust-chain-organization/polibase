# Prompt templates for LLM operations
version: "1.0"

prompts:
  # Minutes processing prompts
  minutes_divide:
    template: |
      議事録を分析し、30個のセクションに分割してください。
      各セクションには以下の情報を含めてください：
      - chapter_number: セクション番号（1から始まる連番）
      - keyword: そのセクションを識別するキーワード（発言者名や重要な語句）

      議事録:
      {minutes}

    variables:
      - minutes

    description: "Divide meeting minutes into chapters"

  speech_divide:
    template: |
      以下のセクションから発言者と発言内容を抽出してください。
      各発言について以下の情報を含めてください：
      - speech_order: 発言順序（1から始まる連番）
      - speaker: 発言者名
      - content: 発言内容

      セクション:
      {section_string}

    variables:
      - section_string

    description: "Extract speeches from section"

  minutes_boundary_detect:
    template: |
      以下の議事録テキストを分析し、出席者情報（参加者リスト、委員名簿など）と実際の議事内容（発言記録）の境界を見つけてください。

      重要：テキストの冒頭にメタデータ（タイトル、日付、URL、会議名等）がある場合は、それも出席者情報の一部として扱い、実際の発言が始まる箇所を境界としてください。

      議事録テキスト：
      {{minutes_text}}

      # 分析方法
      1. 議事録の構造を理解してください（メタデータ→出席者リスト→特記事項→議事内容の順が一般的）
      2. 出席者情報として含めるべきセクション（これらはすべて境界の前に含める）：
         - メタデータ部分（会議名、日付、URL等）
         - ◯出席委員、◯欠席委員
         - ◯委員会説明員
         - ◯配付資料、◯要求資料
         - ◯特記事項（重要：議長出席などの追加出席者情報を含む）
      3. 境界の位置の決定方法：
         - 最優先：「◯特記事項」セクションがある場合は、その内容（例：「西村義直議長出席」）の後に境界を置く
         - 次に「－－－」などの区切り線がある場合は、その直後に境界を置く
         - 区切り線がない場合は、時刻表記［午後○時○分　開会］の直前に境界を置く
         - それもない場合は、最初の発言（○議長、◆委員など）の直前に境界を置く

      重要：◯特記事項セクションとその内容（「○○議長出席」など）は必ず出席者情報側に含めてください。

      # 境界が存在しない場合（必ず boundary_found: false を返す）
      以下のいずれかに該当する場合は、出席者情報が存在しないため boundary_found: false を返してください：
      - テキスト全体が発言（○議長、◆委員など）のみで構成されている場合
      - 出席者リストや委員名簿などの記載が一切ない場合
      - 境界がテキストの末尾付近（最後の100文字以内）にしか見つからない場合
      - テキストの冒頭から発言が始まっている場合

      重要：境界を無理に探す必要はありません。出席者情報がない場合は素直に boundary_found: false を返してください。

      # 重要な指示
      boundary_textには、必ず以下の形式で返してください：
      「（境界の直前にある実際のテキスト10-20文字）｜境界｜（境界の直後にある実際のテキスト10-20文字）」

      ※「実際のテキスト」とは、上記で与えられた議事録テキストから抽出した文字列です。
      ※「｜境界｜」だけを返すのではなく、必ず前後のテキストも含めてください。
      ※境界がテキストの末尾付近にある場合は、それは無効な境界です。boundary_found: false を返してください。

      # boundary_textの正しい例（実際の文字列を含む）
      - "西村義直議長出席\n正副委員長の互選\n－－－｜境界｜－－－－－－－－－－－\n［午後２時47分"
      - "－－－－－－－－－－－－－－－－｜境界｜\n［午後２時47分　開会］\n○議長"
      - "委員　菅谷浩平議員　委員　平田圭｜境界｜\n\n○委員長（みちはた弘之）　それでは"
      - "特記事項\n西村義直議長出席｜境界｜\n－－－－－－－－－－－－"

      # boundary_textの間違った例
      - "｜境界｜" （前後のテキストがない）
      - "境界前のテキスト｜境界｜境界後のテキスト" （実際のテキストではなく説明文）
      - "散会いたします。［午後２時48分散会］委員長みちはた弘之｜境界｜" （末尾を境界としている - 無効）

      # 出力形式
      {{
        "boundary_found": true/false,
        "boundary_text": "（実際のテキスト）｜境界｜（実際のテキスト）",
        "boundary_type": "separator_line" | "speech_start" | "time_marker" | "none",
        "confidence": 0.0-1.0,
        "reason": "境界判定の理由"
      }}

      # 注意事項
      - 境界が見つからない、または出席者情報がない場合は必ず boundary_found: false を返してください
      - boundary_textに入れるのは、実際に議事録テキストに存在する文字列です
      - テキストの末尾付近を境界として選ばないでください

      議事録テキスト:
      {minutes_text}

    variables:
      - minutes_text

    description: "Detect boundary between attendee list and speech content"

  extract_attendees_mapping:
    template: |
      以下のテキストからすべての人名を抽出してください。

      {attendees_text}

      重要な抽出ポイント：
      1. 「◯出席委員」セクションの人名を抽出
      2. 「◯欠席委員」セクションがある場合はスキップ（欠席者は除外）
      3. 「◯特記事項」セクションも必ず確認し、「○○議長出席」「○○市長出席」などの記載から人名を抽出
      4. 「◯委員会説明員」セクションからも人名を抽出
      5. その他のセクションでも人名らしきものがあれば抽出

      抽出ルール：
      - 役職（議員、議長、委員長、副委員長、委員、市長、局長など）は除外して人名のみ
      - 敬称（氏、様、さん）は除外
      - 人名内のスペースは保持（例：富　きくお）
      - 「なし」という記載は無視

      例：
      - 「委員長　　みちはた弘之議員」→「みちはた弘之」
      - 「西村義直議長出席」→「西村義直」
      - 「田中太郎市長」→「田中太郎」
      - 「なし」→（抽出しない）

      注意：regular_attendeesフィールドに抽出した全人名のリストを入れてください。重複は除去してください。

    variables:
      - attendees_text

    description: "Extract role-to-name mapping from attendees information"

  speech_divide_kokkai:
    template: |
      以下の議事録テキストから、すべての発言を抽出してください。

      発言の形式:
      - 「○」「◆」などの記号の後に発言者名、その後に発言内容が続きます
      - 例：「○議長（西村義直）　ただ今から、常任委員会を開会いたします。」
      - 例：「○井上よしひろ議員　予算案について質問があります。」
      - 括弧内の読み声（「異議なし」と呼ぶ者あり）なども発言として含めてください

      抽出する情報（JSON形式で返してください）:
      speaker_and_speech_content_list: [
        {{
          "speaker": "発言者の名前",
          "speech_content": "発言内容全文",
          "chapter_number": 1,
          "sub_chapter_number": 1,
          "speech_order": 1
        }}
      ]

      重要：
      - 必ず1件以上の発言を抽出してください
      - 発言者名に○や◆の記号は含めないでください
      - 発言者名に括弧がある場合は括弧も含めてください（例：「議長（西村義直）」）
      - speech_orderは1から始まる連番にしてください

      議事録テキスト:
      {section_string}

    variables:
      - section_string

    description: "Extract speeches from kokkai minutes"

  # Speaker matching prompts
  speaker_match:
    template: |
      あなたは議事録の発言者名マッチング専門家です。
      議事録から抽出された発言者名と、既存の発言者リストから最も適切なマッチを見つけてください。

      # 抽出された発言者名
      {speaker_name}

      # 既存の発言者リスト
      {available_speakers}

      # マッチング基準
      1. 完全一致を最優先
      2. 括弧内の名前との一致（例: "委員長(平山たかお)" → "平山たかお"）
      3. 記号除去後の一致（例: "◆委員(下村あきら)" → "委員(下村あきら)"）
      4. 部分一致や音韻的類似性
      5. 漢字の異なる読みや表記ゆれ

      # 出力形式
      以下のJSON形式で回答してください：
      {{
          "matched": true/false,
          "speaker_id": マッチした場合のID (数値) または null,
          "speaker_name": マッチした場合の名前 (文字列) または null,
          "confidence": 信頼度 (0.0-1.0の小数),
          "reason": "マッチング判定の理由"
      }}

      # 重要な注意事項
      - 確実性が低い場合は matched: false を返してください
      - confidence は 0.8 以上の場合のみマッチとして扱ってください
      - 複数の候補がある場合は最も確からしいものを選んでください

    variables:
      - speaker_name
      - available_speakers

    description: "Match speaker names using LLM"

  # Politician extraction prompts
  politician_extract:
    template: |
      議事録から政治家の情報を抽出してください。
      各政治家について以下の情報を含めてください：
      - name: 氏名
      - party: 所属政党（わかる場合）
      - position: 役職（わかる場合）

      議事録:
      {minutes}

    variables:
      - minutes

    description: "Extract politicians from minutes"

  # Party member extraction prompts
  party_member_extract:
    template: |
      あなたは政党の議員一覧ページから議員情報を抽出する専門家です。
      以下のHTMLコンテンツから、{party_name}所属の議員情報を抽出してください。

      【重要】必ずページ内の全ての議員を漏れなく抽出してください。一部だけでなく、リストされている全員を対象としてください。

      抽出する情報：
      - name: 議員の氏名（姓名）
      - position: 役職（衆議院議員、参議院議員、地方議員など）
      - electoral_district: 選挙区（例：東京1区、比例北海道）
      - prefecture: 都道府県（選挙区から推測可能な場合）
      - profile_url: プロフィールページのURL（相対URLの場合は{base_url}を基準に絶対URLに変換）
      - party_position: 党内役職（代表、幹事長など）

      注意事項：
      - 議員でない人物（スタッフ、事務所関係者など）は除外してください
      - 氏名は漢字表記を優先し、ふりがなは除外してください
      - 選挙区から都道府県を推測できる場合は prefecture に設定してください
      - URLは絶対URLに変換してください
      - リストやテーブル、カード形式など、どのような形式でも全ての議員を抽出してください
      - ページ内に「もっと見る」「続きを読む」のような表記があっても、表示されている全ての議員を対象としてください

      HTMLコンテンツ：
      {content}

    variables:
      - party_name
      - base_url
      - content

    description: "Extract party members from HTML"

  # Conference member extraction prompts
  conference_member_match:
    template: |
      あなたは会議体メンバーと政治家のマッチング専門家です。
      抽出されたメンバーと既存の政治家データベースから最適なマッチを見つけてください。

      # 抽出されたメンバー情報
      氏名: {member_name}
      役職: {member_role}
      所属政党: {member_party}

      # 候補となる政治家リスト
      {candidates}

      # マッチング基準
      1. 氏名の一致（完全一致、部分一致、表記ゆれを考慮）
      2. 所属政党の一致
      3. 役職の整合性（市議会議員と国会議員を混同しない）
      4. 同姓同名の場合は政党や役職で判断

      # 出力形式
      以下のJSON形式で回答してください：
      {{
          "matched": true/false,
          "politician_id": マッチした場合のID (数値) または null,
          "confidence": 信頼度 (0.0-1.0の小数),
          "reason": "マッチング判定の理由"
      }}

      # 信頼度の基準
      - 0.9以上: 氏名と政党が完全一致
      - 0.7-0.9: 氏名は一致するが政党が不明または部分一致
      - 0.5-0.7: 氏名に表記ゆれがあるが政党は一致
      - 0.5未満: マッチング不可

    variables:
      - member_name
      - member_role
      - member_party
      - candidates

    description: "Match conference members with politicians"

  # Parliamentary group extraction prompts
  parliamentary_group_extract:
    template: |
      以下のHTMLコンテンツから議員団（会派）の情報を抽出してください。

      抽出する情報：
      - group_name: 議員団名（例：自由民主党議員団、公明党議員団）
      - members: メンバーリスト
        - name: 議員名
        - role: 役職（団長、幹事長、副団長など）
        - party: 所属政党（判明する場合）

      注意事項：
      - 議員団名は正式名称を使用してください
      - 役職がない場合は「団員」としてください
      - 議員名から敬称（議員、氏など）は除外してください

      HTMLコンテンツ：
      {content}

    variables:
      - content

    description: "Extract parliamentary group information"

  # Link classification prompts
  classify_page_links:
    template: |
      あなたは政党ウェブサイトのリンク分類専門家です。
      以下のリンクを分析し、それぞれのリンクタイプを判定してください。

      政党名: {party_name}
      コンテキスト: {context}

      リンク一覧:
      {links}

      各リンクについて、以下の形式でJSON配列として返してください:
      [
        {{
          "url": "リンクのURL",
          "link_type": "prefecture_list | city_list | member_list | member_profile | other",
          "confidence": 0.0から1.0の信頼度,
          "reason": "判定理由"
        }}
      ]

      リンクタイプの定義:
      - prefecture_list: 都道府県別の議員リスト（例: 「東京都」「大阪府」）
      - city_list: 市区町村別の議員リスト（例: 「渋谷区」「横浜市」）
      - member_list: 議員一覧ページ（例: 「議員一覧」「メンバー」「所属議員」）
      - member_profile: 個別の議員プロフィールページ
      - other: その他のページ

      判定基準:
      1. リンクテキストとURLパスの両方を考慮してください
      2. 都道府県名や市区町村名が含まれていれば該当するリストタイプと判定
      3. 「一覧」「メンバー」「所属」などのキーワードがあれば member_list
      4. 個人名が含まれていれば member_profile
      5. 確信が持てない場合は confidence を低めに設定

      重要: 必ず全てのリンクについて分類結果を返してください。
      JSON形式のみを返し、余計な説明は不要です。

    variables:
      - party_name
      - context
      - links

    description: "Classify page links using LLM"

# Legacy prompts (for backward compatibility)
legacy_prompts:
  divide_chapter_prompt: "langchain_hub:divide_chapter_prompt"
  redivide_chapter_prompt: "langchain_hub:redivide_chapter_prompt"
  comment_divide_prompt: "langchain_hub:comment_divide_prompt"
  politician_extraction_prompt: "langchain_hub:politician_extraction_prompt"
