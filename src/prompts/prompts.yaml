# Prompt templates for LLM operations
version: "1.0"

prompts:
  # Minutes processing prompts
  minutes_divide:
    template: |
      議事録を分析し、30個のセクションに分割してください。
      各セクションには以下の情報を含めてください：
      - chapter_number: セクション番号（1から始まる連番）
      - keyword: そのセクションを識別するキーワード（発言者名や重要な語句）

      議事録:
      {minutes}

    variables:
      - minutes

    description: "Divide meeting minutes into chapters"

  speech_divide:
    template: |
      以下のセクションから発言者と発言内容を抽出してください。
      各発言について以下の情報を含めてください：
      - speech_order: 発言順序（1から始まる連番）
      - speaker: 発言者名
      - content: 発言内容

      セクション:
      {section_string}

    variables:
      - section_string

    description: "Extract speeches from section"

  minutes_boundary_detect:
    template: |
      以下の議事録テキストを分析し、出席者情報（参加者リスト、委員名簿など）と実際の議事内容（発言記録）の境界を見つけてください。

      # 分析方法
      1. 議事録の構造を理解してください（出席者リスト→議事内容の順が一般的）
      2. 以下のパターンを探してください：
         - 出席者情報の終了点（例：委員名の列挙の終わり）
         - 議事開始の合図（例：「開会」「議長」「委員長」の発言開始）
         - 時刻表記（例：［午後２時47分　開会］）
         - 発言者記号の開始（例：○議長、◆委員）

      # 出力形式
      境界の前後20文字を含むテキストを以下のJSON形式で返してください：
      {{
        "boundary_found": true/false,
        "boundary_text": "境界前10-20文字...｜境界｜...境界後10-20文字",
        "boundary_type": "separator_line" | "speech_start" | "time_marker" | "none",
        "confidence": 0.0-1.0,
        "reason": "境界判定の理由"
      }}

      # 注意事項
      - 境界が明確でない場合は boundary_found: false を返してください
      - boundary_text の「｜境界｜」は実際の境界位置を示すマーカーです
      - 出席者情報が無い場合は、最初から議事内容として扱ってください

      議事録テキスト:
      {minutes_text}

    variables:
      - minutes_text

    description: "Detect boundary between attendee list and speech content"

  speech_divide_kokkai:
    template: |
      以下の国会議事録のセクションから実際に発言した人と発言内容のみを抽出してください。

      国会議事録の形式:
      - 発言者名は通常「○」や「◆」などの記号に続いて記載されます（例：○林国務大臣、○原口委員）
      - 委員長の発言は記号なしで記載されることがあります
      - 議事録の冒頭には「出席委員」として参加者リストが記載されることがありますが、これは発言者ではありません
      - 議事録の末尾に「委員長　○○」のような署名がある場合、これは発言ではありません

      抽出ルール:
      1. 実際に発言した人の発言のみを抽出してください
      2. 出席者リストや参加者一覧は発言として扱わないでください
      3. 以下は発言者名として扱わないでください:
         - 「タイトル」「発言者」「御質問」「我が国」「警察庁」「岸田内閣」「冒頭」
           「短くお願いします」など一般名詞
         - 「==」などの区切り文字
         - 「不明」（発言者が特定できない場合のみ使用）
      4. 発言者名から役職や敬称を含めて抽出してください（例：林国務大臣、原口委員）
      5. 発言内容が空の場合や意味のない内容の場合は除外してください
      6. 重要：出席者として名前が記載されているだけで実際に発言していない人は含めないでください
      7. 重要：議事録末尾の「委員長　○○」のような署名は発言ではないので除外してください

      各発言について以下の情報を含めてください：
      - speech_order: 発言順序（1から始まる連番）
      - speaker: 実際に発言した人の名前（人名のみ）
      - speech_content: その人が実際に話した内容（実際の発言である必要があります）

      セクション:
      {section_string}

    variables:
      - section_string

    description: "Extract speeches from kokkai minutes"

  # Speaker matching prompts
  speaker_match:
    template: |
      あなたは議事録の発言者名マッチング専門家です。
      議事録から抽出された発言者名と、既存の発言者リストから最も適切なマッチを見つけてください。

      # 抽出された発言者名
      {speaker_name}

      # 既存の発言者リスト
      {available_speakers}

      # マッチング基準
      1. 完全一致を最優先
      2. 括弧内の名前との一致（例: "委員長(平山たかお)" → "平山たかお"）
      3. 記号除去後の一致（例: "◆委員(下村あきら)" → "委員(下村あきら)"）
      4. 部分一致や音韻的類似性
      5. 漢字の異なる読みや表記ゆれ

      # 出力形式
      以下のJSON形式で回答してください：
      {{
          "matched": true/false,
          "speaker_id": マッチした場合のID (数値) または null,
          "speaker_name": マッチした場合の名前 (文字列) または null,
          "confidence": 信頼度 (0.0-1.0の小数),
          "reason": "マッチング判定の理由"
      }}

      # 重要な注意事項
      - 確実性が低い場合は matched: false を返してください
      - confidence は 0.8 以上の場合のみマッチとして扱ってください
      - 複数の候補がある場合は最も確からしいものを選んでください

    variables:
      - speaker_name
      - available_speakers

    description: "Match speaker names using LLM"

  # Politician extraction prompts
  politician_extract:
    template: |
      議事録から政治家の情報を抽出してください。
      各政治家について以下の情報を含めてください：
      - name: 氏名
      - party: 所属政党（わかる場合）
      - position: 役職（わかる場合）

      議事録:
      {minutes}

    variables:
      - minutes

    description: "Extract politicians from minutes"

  # Party member extraction prompts
  party_member_extract:
    template: |
      あなたは政党の議員一覧ページから議員情報を抽出する専門家です。
      以下のHTMLコンテンツから、{party_name}所属の議員情報を抽出してください。

      抽出する情報：
      - name: 議員の氏名（姓名）
      - position: 役職（衆議院議員、参議院議員など）
      - electoral_district: 選挙区（例：東京1区、比例北海道）
      - prefecture: 都道府県（選挙区から推測可能な場合）
      - profile_url: プロフィールページのURL（相対URLの場合は{base_url}を基準に絶対URLに変換）
      - party_position: 党内役職（代表、幹事長など）

      注意事項：
      - 議員でない人物（スタッフ、事務所関係者など）は除外してください
      - 氏名は漢字表記を優先し、ふりがなは除外してください
      - 選挙区から都道府県を推測できる場合は prefecture に設定してください
      - URLは絶対URLに変換してください

      HTMLコンテンツ：
      {content}

    variables:
      - party_name
      - base_url
      - content

    description: "Extract party members from HTML"

  # Conference member extraction prompts
  conference_member_match:
    template: |
      あなたは会議体メンバーと政治家のマッチング専門家です。
      抽出されたメンバーと既存の政治家データベースから最適なマッチを見つけてください。

      # 抽出されたメンバー情報
      氏名: {member_name}
      役職: {member_role}
      所属政党: {member_party}

      # 候補となる政治家リスト
      {candidates}

      # マッチング基準
      1. 氏名の一致（完全一致、部分一致、表記ゆれを考慮）
      2. 所属政党の一致
      3. 役職の整合性（市議会議員と国会議員を混同しない）
      4. 同姓同名の場合は政党や役職で判断

      # 出力形式
      以下のJSON形式で回答してください：
      {{
          "matched": true/false,
          "politician_id": マッチした場合のID (数値) または null,
          "confidence": 信頼度 (0.0-1.0の小数),
          "reason": "マッチング判定の理由"
      }}

      # 信頼度の基準
      - 0.9以上: 氏名と政党が完全一致
      - 0.7-0.9: 氏名は一致するが政党が不明または部分一致
      - 0.5-0.7: 氏名に表記ゆれがあるが政党は一致
      - 0.5未満: マッチング不可

    variables:
      - member_name
      - member_role
      - member_party
      - candidates

    description: "Match conference members with politicians"

  # Parliamentary group extraction prompts
  parliamentary_group_extract:
    template: |
      以下のHTMLコンテンツから議員団（会派）の情報を抽出してください。

      抽出する情報：
      - group_name: 議員団名（例：自由民主党議員団、公明党議員団）
      - members: メンバーリスト
        - name: 議員名
        - role: 役職（団長、幹事長、副団長など）
        - party: 所属政党（判明する場合）

      注意事項：
      - 議員団名は正式名称を使用してください
      - 役職がない場合は「団員」としてください
      - 議員名から敬称（議員、氏など）は除外してください

      HTMLコンテンツ：
      {content}

    variables:
      - content

    description: "Extract parliamentary group information"

# Legacy prompts (for backward compatibility)
legacy_prompts:
  divide_chapter_prompt: "langchain_hub:divide_chapter_prompt"
  redivide_chapter_prompt: "langchain_hub:redivide_chapter_prompt"
  comment_divide_prompt: "langchain_hub:comment_divide_prompt"
  politician_extraction_prompt: "langchain_hub:politician_extraction_prompt"
