name: Docker Build & Cache

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  docker-compose-test:
    name: Docker Compose Integration Test
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10 # タイムアウトを設定

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file
        run: |
          cp .env.example .env
          echo "GOOGLE_API_KEY=test-api-key" >> .env

      - name: Start services
        run: |
          # PostgreSQLを先に起動
          docker compose -f docker/docker-compose.ci.yml up -d postgres
          sleep 2
          # その他のサービスを起動
          docker compose -f docker/docker-compose.ci.yml up -d
          docker compose -f docker/docker-compose.ci.yml ps

      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL to start..."
          # より効率的なヘルスチェック
          timeout 30 bash -c 'until docker compose -f docker/docker-compose.ci.yml exec -T postgres pg_isready -U polibase_user -d polibase_db; do sleep 1; done'
          echo "PostgreSQL is ready!"

      - name: Run database setup
        run: |
          # マイグレーションとシードデータを並列実行
          echo "Setting up database..."

          # 全てのSQLファイルを一度に実行
          cat database/migrations/*.sql database/seed_*_generated.sql | \
            docker compose -f docker/docker-compose.ci.yml exec -T postgres psql -U polibase_user -d polibase_db

          # 接続テスト
          docker compose -f docker/docker-compose.ci.yml exec -T polibase uv run python -c "from src.infrastructure.config.database import test_connection; assert test_connection()"

      - name: Test CLI
        run: |
          docker compose -f docker/docker-compose.ci.yml exec -T polibase uv run polibase --help
          docker compose -f docker/docker-compose.ci.yml exec -T polibase uv run polibase test-connection

      - name: Run smoke tests
        run: |
          # CI用の軽量テストのみ実行
          docker compose -f docker/docker-compose.ci.yml exec -T -e CI=true polibase uv run pytest tests/ci_smoke_test.py -v

      - name: Stop services
        if: always()
        run: |
          docker compose -f docker/docker-compose.ci.yml down -v
