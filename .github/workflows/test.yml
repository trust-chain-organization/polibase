name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: polibase_user
          POSTGRES_PASSWORD: polibase_password
          POSTGRES_DB: polibase_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync

      - name: Install Playwright browsers
        run: |
          uv run playwright install chromium --with-deps

      - name: Set up test environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://polibase_user:polibase_password@localhost:5432/polibase_db" >> .env
          echo "GOOGLE_API_KEY=test-api-key" >> .env

      - name: Initialize database
        run: |
          PGPASSWORD=polibase_password psql -h localhost -U polibase_user -d polibase_db -f database/init.sql
          PGPASSWORD=polibase_password psql -h localhost -U polibase_user -d polibase_db -f database/seed_governing_bodies.sql
          PGPASSWORD=polibase_password psql -h localhost -U polibase_user -d polibase_db -f database/seed_political_parties.sql
          PGPASSWORD=polibase_password psql -h localhost -U polibase_user -d polibase_db -f database/seed_conferences.sql
          # Apply migrations
          for file in database/migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Applying migration: $file"
              PGPASSWORD=polibase_password psql -h localhost -U polibase_user -d polibase_db -f "$file"
            fi
          done

      - name: Run tests with coverage
        env:
          CI: true
        run: |
          uv run pytest tests/ -v --tb=short --cov=src --cov-report=html --cov-report=term --cov-report=xml

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Check code formatting
        run: |
          uv run ruff format --check src/ tests/

      - name: Check code style
        run: |
          uv run ruff check src/ tests/

      - name: Run type checking
        run: |
          uv run pyright src/ || true  # Allow failures for now

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: polibase_user
          POSTGRES_PASSWORD: polibase_password
          POSTGRES_DB: polibase_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync

      - name: Install Playwright browsers
        run: |
          uv run playwright install chromium --with-deps

      - name: Set up test environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://polibase_user:polibase_password@localhost:5432/polibase_db" >> .env
          echo "GOOGLE_API_KEY=test-api-key" >> .env

      - name: Initialize database
        run: |
          PGPASSWORD=polibase_password psql -h localhost -U polibase_user -d polibase_db -f database/init.sql
          PGPASSWORD=polibase_password psql -h localhost -U polibase_user -d polibase_db -f database/seed_governing_bodies.sql
          PGPASSWORD=polibase_password psql -h localhost -U polibase_user -d polibase_db -f database/seed_political_parties.sql
          PGPASSWORD=polibase_password psql -h localhost -U polibase_user -d polibase_db -f database/seed_conferences.sql
          # Apply migrations
          for file in database/migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Applying migration: $file"
              PGPASSWORD=polibase_password psql -h localhost -U polibase_user -d polibase_db -f "$file"
            fi
          done

      - name: Test database connection
        run: |
          uv run python -c "from src.config.database import test_connection; test_connection()"

      - name: Test CLI commands
        run: |
          uv run polibase --help
          uv run polibase test-connection

      - name: Test Streamlit app startup
        run: |
          timeout 10s uv run polibase streamlit --help || true
