name: Weekly CI/CD Metrics Report

on:
  schedule:
    # 毎週月曜日の午前9時（JST）に実行
    - cron: "0 0 * * 1"
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  actions: read

jobs:
  generate-report:
    name: Generate Weekly Metrics
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          pip install requests pandas matplotlib seaborn

      - name: Generate metrics report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -c "
          import os
          import json
          import requests
          from datetime import datetime, timedelta
          import pandas as pd

          # GitHub API設定
          headers = {
              'Authorization': f'token {os.environ["GITHUB_TOKEN"]}',
              'Accept': 'application/vnd.github.v3+json'
          }
          repo = os.environ['GITHUB_REPOSITORY']

          # 過去1週間のワークフロー実行を取得
          end_date = datetime.now()
          start_date = end_date - timedelta(days=7)

          url = f'https://api.github.com/repos/{repo}/actions/runs'
          params = {
              'created': f'>={start_date.isoformat()}',
              'per_page': 100
          }

          response = requests.get(url, headers=headers, params=params)
          runs = response.json()['workflow_runs']

          # メトリクスの集計
          total_runs = len(runs)
          successful_runs = sum(1 for run in runs if run['conclusion'] == 'success')
          failed_runs = sum(1 for run in runs if run['conclusion'] == 'failure')

          success_rate = (successful_runs / total_runs * 100) if total_runs > 0 else 0

          # ワークフロー別の統計
          workflow_stats = {}
          for run in runs:
              workflow_name = run['name']
              if workflow_name not in workflow_stats:
                  workflow_stats[workflow_name] = {'success': 0, 'failure': 0, 'total': 0, 'duration': []}

              workflow_stats[workflow_name]['total'] += 1
              if run['conclusion'] == 'success':
                  workflow_stats[workflow_name]['success'] += 1
              elif run['conclusion'] == 'failure':
                  workflow_stats[workflow_name]['failure'] += 1

              # 実行時間の計算
              if run['created_at'] and run['updated_at']:
                  created = datetime.fromisoformat(run['created_at'].replace('Z', '+00:00'))
                  updated = datetime.fromisoformat(run['updated_at'].replace('Z', '+00:00'))
                  duration = (updated - created).total_seconds()
                  workflow_stats[workflow_name]['duration'].append(duration)

          # レポートの生成
          report = f'''# 週次CI/CDメトリクスレポート

          期間: {start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}

          ## 概要
          - 総実行回数: {total_runs}
          - 成功: {successful_runs}
          - 失敗: {failed_runs}
          - 成功率: {success_rate:.1f}%

          ## ワークフロー別統計

          | ワークフロー | 実行回数 | 成功 | 失敗 | 成功率 | 平均実行時間 |
          |------------|---------|------|------|--------|-------------|
          '''

          for workflow, stats in workflow_stats.items():
              success_rate = (stats['success'] / stats['total'] * 100) if stats['total'] > 0 else 0
              avg_duration = sum(stats['duration']) / len(stats['duration']) if stats['duration'] else 0
              avg_duration_min = avg_duration / 60

              report += f"| {workflow} | {stats['total']} | {stats['success']} | {stats['failure']} | {success_rate:.1f}% | {avg_duration_min:.1f}分 |\n"

          print(report)

          # サマリーファイルに保存
          with open('weekly-report.md', 'w') as f:
              f.write(report)
          "

      - name: Create issue with report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('weekly-report.md', 'utf8');

            const date = new Date();
            const title = `CI/CD週次レポート - ${date.toISOString().split('T')[0]}`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: report,
              labels: ['ci-cd-report', 'automated']
            });

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: weekly-ci-cd-report
          path: weekly-report.md
